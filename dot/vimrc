set nocompatible  " Use Vim settings, rather then Vi settings
set nobackup
set nowritebackup
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set number
set backspace=2

set shell=bash

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Vundle
filetype off " Required for Vundle!
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Bundle 'gmarik/Vundle.vim'

Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-eunuch'
Bundle 'elzr/vim-json'
Bundle 'stanangeloff/php.vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'pangloss/vim-javascript'
Bundle 'MaxMEllon/vim-jsx-pretty'
Bundle 'godlygeek/tabular'
Bundle 'mustache/vim-mustache-handlebars'
Bundle 'Matt-Deacalion/vim-systemd-syntax'

Bundle 'Sporky023/vim-flavored-markdown'

Bundle 'rafi/awesome-vim-colorschemes'
Bundle 'tpope/vim-surround'
Bundle 'wesQ3/vim-windowswap'
" Bundle 'wakatime/vim-wakatime'

Bundle 'ekalinin/Dockerfile.vim' 
Bundle 'cakebaker/scss-syntax.vim'

Bundle 'SirVer/ultisnips'
Bundle 'tpope/vim-abolish'
Bundle 'yegappan/greplace'

call vundle#end()

packadd! matchit

function! s:Vimrc()
  call s:useDoubleAsteriskInGrepForRecursive()

  call s:SyntaxHighlighting()
  call s:DisableFolding()
  call s:OpenSplitsAfterCurrent()
  call s:TabToEscapeInsertMode()
  call s:Softtabs2()
  call s:VisualAppearance()
  call s:AllowPluginsToSetIndentRules()
  " call s:UseGhMarkdown()
  call s:HighlightJbuilderAsRuby()
  call s:NonGreedyTabCompletion()

  call s:LeaderIsComma()
  call s:LeaderComment()
  call s:LeaderSave()
  call s:LeaderCloseWindow()
  call s:LeaderBreakupLine()
  call s:LeaderConvertEs6LiteralToBraces()
  call s:LeaderForCtrlP()
  call s:LeaderInsertTimestamp()
  call s:LeaderWindowswap()
  call s:LeaderCleanFileWhitespace()

  call s:treatRuAsRuby()
  call s:treatCmpAsXml()
  call s:SetCtrlpIgnore()
  call s:CtrlpDontSearchForGitDir()
  " call s:CtrlpIgnoreSameFilesAsGitignore()
  " call s:CtrlpNoMaxFiles()
  call s:UseMxwVimJsxForJsExtension()
  call s:ConfigureUltiSnips()
endfunction

function! s:SyntaxHighlighting()
  syntax on
endfunction

function! s:DisableFolding()
  set nofoldenable
endfunction

function! s:OpenSplitsAfterCurrent()
  set splitright
  set splitbelow
endfunction

function! s:TabToEscapeInsertMode()
  imap <Tab> <Esc>
endfunction

function! s:Softtabs2()
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
  set expandtab
endfunction

function! s:VisualAppearance()
  set colorcolumn=81
  colorscheme jellybeans
  hi StatusLine ctermbg=186
  hi LineNr ctermfg=237
endfunction

function! s:AllowPluginsToSetIndentRules()
  filetype on
  filetype plugin on
  filetype indent on
endfunction

function! s:UseGhMarkdown()
  augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
  augroup END
endfunction

function! s:HighlightJbuilderAsRuby()
  au BufNewFile,BufRead *.json.jbuilder set ft=ruby
  au BufNewFile,BufRead *.jbuilder set ft=ruby
endfunction

function! s:NonGreedyTabCompletion()
  set wildmode=longest,list,full
  set wildmenu
endfunction

function! s:LeaderIsComma()
  let g:mapleader = ','
endfunction

function! s:LeaderComment()
  vmap <Leader>c :TComment<CR>
  map <Leader>c  :TComment<CR>
endfunction

function! s:LeaderSave()
  map <Leader>i :w<CR>
  nmap <Leader><Leader> :w<CR>
endfunction

function! s:LeaderCloseWindow()
  nmap <Leader>w :q<CR>
endfunction

function! s:LeaderBreakupLine()
  call s:LeaderBreakupLineOnComma()
  call s:LeaderBreakupLineOnBrackets()
  call s:LeaderBreakupLineOnParens()
endfunction

function! s:LeaderConvertEs6LiteralToBraces()
  nmap <Leader>p 0/=><CR>f(i{<CR>return <ESC>jVkf(%>k0f(%a<CR>}<ESC>k0f)%O<CR><ESC>kcc
endfunction

function! s:LeaderBreakupLineOnComma()
  nmap <Leader>f 0f,a<CR><Esc>
endfunction

" 2019-09-12 work in progress
function! s:LeaderBreakupLineOnBrackets2() " 2
  nmap <Leader>g /[[{]<CR>a<CR><Esc>k/[[{]<CR>V%:s/\s$//<CR>0
endfunction

function! s:LeaderBreakupLineOnBrackets()
  nmap <Leader>g 0/[[{]<CR>a<CR><Esc>k0/[[{]<CR>%i<CR><Esc>0/[}\]]<CR><s-v>%:s/ *$//<CR>0/[}\]]<CR>%j0
endfunction

function! s:LeaderBreakupLineOnParens()
  nmap <Leader>v f(a<CR><Esc>k$%i<CR><Esc>f)%j^
endfunction

function! s:LeaderForCtrlP()
  nmap <Leader>ae :CtrlP<CR>
  nmap <Leader>av :vs<CR>:CtrlP<CR>
  nmap <Leader>as :sp<CR>:CtrlP<CR>
  nmap <Leader>at :tabe<CR>:CtrlP<CR>
endfunction

function! s:LeaderInsertTimestamp()
  nmap <Leader>t :put =strftime('%c')<CR>
endfunction

function! s:LeaderWindowswap()
  let g:windowswap_map_keys = 0
  nnoremap <silent> <leader>xw :call WindowSwap#EasyWindowSwap()<CR>
endfunction

function! s:LeaderCleanFileWhitespace()
  nmap <Leader>b :%s/\s\+$//gc<CR>
endfunction

function! s:useDoubleAsteriskInGrepForRecursive() abort
  " http://unix.stackexchange.com/questions/172275/vim-grep-using-the-bash-globstar-option
  let globstarDetection = system('bash -c "shopt | grep globstar"')
  if globstarDetection ==  ''
    echo "WARNING: Current bash does not support globstar option!"
    echo "This means that system() calls will fail,"
    echo "which among other things will prevent Vundle from installing packages."
    echo "Recommend you upgrade bash to version >= 4."
    echo "See function s:useDoubleAsteriskInGrepForRecursive in vimrc"
    throw "problem"
  endif

  set shell+=\ -O\ globstar " this requires bash with globstar support
endfunction

function! s:treatRuAsRuby()
  au BufRead,BufNewFile *.ru setfiletype ruby
endfunction

function! s:treatCmpAsXml()
  au BufRead,BufNewFile *.cmp setfiletype xml
endfunction

function! s:SetCtrlpIgnore()
  let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|storage\|tmp\|tmp\'
endfunction

function! s:CtrlpDontSearchForGitDir()
  let g:ctrlp_working_path_mode = 0
endfunction

function! s:CtrlpIgnoreSameFilesAsGitignore()
  " https://github.com/kien/ctrlp.vim/issues/313
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']
endfunction

function! s:CtrlpNoMaxFiles()
  " https://github.com/kien/ctrlp.vim/issues/234
  let g:ctrlp_max_files=0
endfunction

function! s:ConfigureUltiSnips()
  let g:UltiSnipsExpandTrigger="<c-f>"
  let g:UltiSnipsJumpForwardTrigger="<c-l>"
  let g:UltiSnipsJumpBackwardTrigger="<c-h>"
  let g:UltiSnipsSnippetsDir=$HOME.'/.vim/my_snippets'
  let g:UltiSnipsSnippetDirectories=["my_snippets"]
  let g:UltiSnipsEditSplit='vertical'
endfunction

function! s:UseMxwVimJsxForJsExtension()
  let g:jsx_ext_required = 0
endfunction


call s:Vimrc()
