snippet cdat "clearData function"
const clearData = (dispatch, ownProps) => {
  $1
}
endsnippet
snippet dataloader "connected react component withDataLoader"
import React from 'react'
import { connect } from 'react-redux'

import withRouterParams from 'hocs/withRouterParams'
import withLoadableDataByStatus from 'hocs/withLoadableDataByStatus'
import { $8 as $8Status } from 'selectors/status'
import { $9 } from 'selectors'
import { $10 } from 'actions'

const dataStatus = (state, ownProps) => (
  $5
)

const loadData = (dispatch, ownProps) => (
  $6
)

const mapState = (state, ownProps) => ({
  $4
})

const $1 = ({$3}) => (
  <React.Fragment>
    $2
	</React.Fragment>
)

export default withRouterParams(
  {$7},

  withLoadableDataByStatus(
    dataStatus,
    loadData,
    connect(mapState)($1)
  )
)
endsnippet

snippet imt "import { useTranslation } from 'react-i18next'"
import { useTranslation } from 'react-i18next'
endsnippet

snippet imcom "import a React component"
import $1 from 'components/$1'
endsnippet

snippet imhoc "import a hoc"
import $1 from 'hocs/$1'
endsnippet

snippet clo "console.log an object"
console.log({$1})
endsnippet

snippet clu "console.log something with util.inspect"
console.log( '$1 = ', require('util').inspect( $1, {depth: ${2:null}} ) )
endsnippet

snippet cll "console.log the line number"
console.log('line: '+ new Error().stack.split("\n").find(x => x.match(/at/)).replace(/at[^:]*:(\d+):.*/, "\$1"))
endsnippet

snippet clup "console.log something with util.inspect, with prefix"
console.log( '$1: $2 = ', require('util').inspect( $2, {depth: ${3:null} } ) )
endsnippet

snippet reducer "A reducer"
import produce from 'immer'

const defaultState = {
  byId: {},
  pages: {},
  totalCount: null
}

const $1Reducer = (state = defaultState, action) => (
  produce(state, draft => {
		switch(action.type){

			default:
		}
	})
)

export default $1Reducer
endsnippet

snippet cl "console.log"
console.log(\`$1\`)
endsnippet

snippet conclfunc "a connected React class component"
import React, { Component } from 'react'
import { connect } from 'react-redux'

class $1 extends Component {
  render () {
    return (
      <div>TODO: $1.render</div>
    )
  }
}

const mapState = (state, ownProps) => ({
  $2
})

const mapDispatch = (dispatch, ownProps) => ({
  $3
})

export default connect(mapState, mapDispatch)($1)
endsnippet

snippet rfunc "A functional React component"
import React from 'react'

const $1 = ($2) => (
  <$3>
   $4
	</$3>
)

export default $1
endsnippet

snippet confunc "A connected functional React component"
import React from 'react'
import { connect } from 'react-redux'

const mapState = (state) => ({
  $3
})

const mapDispatch = (dispatch) => ({
  $4
})

const $1 = ({$2}) => (
  <div>
    $1 $2
  </div>
)

export default connect(mapState, mapDispatch)($1)
endsnippet

snippet xoc "jsX Open, Close tag"
<$1$2>
</$1>
endsnippet
